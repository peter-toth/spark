-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 26


-- !query 0
CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2),
    (1, 3),
    (1, 3),
    (2, 3),
    (null, null),
    (null, null)
    AS tab1(k, v)
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
CREATE TEMPORARY VIEW tab2 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2), 
    (2, 3),
    (3, 4),
    (null, null),
    (null, null)
    AS tab2(k, v)
-- !query 1 schema
struct<>
-- !query 1 output



-- !query 2
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query 2 schema
struct<k:int,v:int>
-- !query 2 output
1	2
1	2
2	3
NULL	NULL
NULL	NULL


-- !query 3
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab1 WHERE k = 1
-- !query 3 schema
struct<k:int,v:int>
-- !query 3 output
1	2
1	2
1	3
1	3


-- !query 4
SELECT * FROM tab1 WHERE k > 2
INTERSECT ALL
SELECT * FROM tab2
-- !query 4 schema
struct<k:int,v:int>
-- !query 4 output



-- !query 5
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2 WHERE k > 3
-- !query 5 schema
struct<k:int,v:int>
-- !query 5 output



-- !query 6
SELECT * FROM tab1
INTERSECT ALL
SELECT CAST(1 AS BIGINT), CAST(2 AS BIGINT)
-- !query 6 schema
struct<k:bigint,v:bigint>
-- !query 6 output
1	2


-- !query 7
SELECT * FROM tab1
INTERSECT ALL
SELECT array(1), 2
-- !query 7 schema
struct<>
-- !query 7 output
org.apache.spark.sql.AnalysisException
IntersectAll can only be performed on tables with the compatible column types. array<int> <> int at the first column of the second table;


-- !query 8
SELECT k FROM tab1
INTERSECT ALL
SELECT k, v FROM tab2
-- !query 8 schema
struct<>
-- !query 8 output
org.apache.spark.sql.AnalysisException
IntersectAll can only be performed on tables with the same number of columns, but the first table has 1 columns and the second table has 2 columns;


-- !query 9
SELECT * FROM tab2
INTERSECT ALL
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query 9 schema
struct<k:int,v:int>
-- !query 9 output
1	2
1	2
2	3
NULL	NULL
NULL	NULL


-- !query 10
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
UNION ALL
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query 10 schema
struct<k:int,v:int>
-- !query 10 output
1	2
1	2
1	3
2	3
NULL	NULL
NULL	NULL


-- !query 11
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
EXCEPT
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query 11 schema
struct<k:int,v:int>
-- !query 11 output
1	3


-- !query 12
(
  (
    (
      SELECT * FROM tab1
      EXCEPT
      SELECT * FROM tab2
    )
    EXCEPT
    SELECT * FROM tab1
  )
  INTERSECT ALL
  SELECT * FROM tab2
)
-- !query 12 schema
struct<k:int,v:int>
-- !query 12 output



-- !query 13
SELECT * 
FROM   (SELECT tab1.k, 
               tab2.v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k)
INTERSECT ALL 
SELECT * 
FROM   (SELECT tab1.k, 
               tab2.v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k)
-- !query 13 schema
struct<k:int,v:int>
-- !query 13 output
1	2
1	2
1	2
1	2
1	2
1	2
1	2
1	2
2	3


-- !query 14
SELECT * 
FROM   (SELECT tab1.k, 
               tab2.v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k) 
INTERSECT ALL 
SELECT * 
FROM   (SELECT tab2.v AS k, 
               tab1.k AS v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k)
-- !query 14 schema
struct<k:int,v:int>
-- !query 14 output



-- !query 15
SELECT v FROM tab1 GROUP BY v
INTERSECT ALL
SELECT k FROM tab2 GROUP BY k
-- !query 15 schema
struct<v:int>
-- !query 15 output
2
3
NULL


-- !query 16
SET spark.sql.legacy.setopsPrecedence.enabled= true
-- !query 16 schema
struct<key:string,value:string>
-- !query 16 output
spark.sql.legacy.setopsPrecedence.enabled	true


-- !query 17
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
UNION ALL
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query 17 schema
struct<k:int,v:int>
-- !query 17 output
1	2
1	2
2	3
NULL	NULL
NULL	NULL


-- !query 18
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
UNION ALL
SELECT * FROM tab1
INTERSECT
SELECT * FROM tab2
-- !query 18 schema
struct<k:int,v:int>
-- !query 18 output
1	2
2	3
NULL	NULL


-- !query 19
SET spark.sql.legacy.setopsPrecedence.enabled = false
-- !query 19 schema
struct<key:string,value:string>
-- !query 19 output
spark.sql.legacy.setopsPrecedence.enabled	false


-- !query 20
CREATE OR REPLACE TEMPORARY VIEW tab3 AS VALUES (decimal(1)), (decimal(2)) tbl3(v)
-- !query 20 schema
struct<>
-- !query 20 output



-- !query 21
SELECT t.v FROM (
  SELECT v FROM tab3
  INTERSECT
  SELECT v + v AS v FROM tab3
) t
-- !query 21 schema
struct<v:decimal(11,0)>
-- !query 21 output
2


-- !query 22
SELECT SUM(t.v) FROM (
  SELECT v FROM tab3
  INTERSECT
  SELECT v + v AS v FROM tab3
) t
-- !query 22 schema
struct<sum(v):decimal(21,0)>
-- !query 22 output
2


-- !query 23
DROP VIEW IF EXISTS tab1
-- !query 23 schema
struct<>
-- !query 23 output



-- !query 24
DROP VIEW IF EXISTS tab2
-- !query 24 schema
struct<>
-- !query 24 output



-- !query 25
DROP VIEW IF EXISTS tab3
-- !query 25 schema
struct<>
-- !query 25 output

